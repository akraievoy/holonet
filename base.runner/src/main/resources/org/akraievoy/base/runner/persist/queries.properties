#
# Copyright 2011 Anton Kraievoy akraievoy@gmail.com
# This file is part of Holonet.
#
# Holonet is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Holonet is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Holonet. If not, see <http://www.gnu.org/licenses/>.
#

info.findSchemaVersion = \
  select "val" \
  from "hn_info" \
  where "path" = 'schema.version';
#=========================
exp.listPaths = \
  select distinct "path" \
  from "hn_exp" \
  order by "path";
exp.findLastStampForPath = \
  select max("millis") \
  from "hn_exp" \
  where "path" = ?;
exp.insertNew = \
  insert into "hn_exp" \
    ("id", "path", "depends", "desc", "millis", "springXml") \
  values \
    (?,?,?,?,?,?);
exp.findByPath = \
  select * \
  from "hn_exp" \
  where "path" = ? \
  order by "millis" desc \
  limit 1;
#=========================
conf.listPathsForExp = \
  select \
    c."uid" as uid, \
    c."desc" as desc \
  from "hn_conf" as c \
  where c."exp_uid" = ?;
conf.findByUId = \
  select * \
  from "hn_conf" \
  where \
    "exp_uid" = ? and \
    "uid" = ?;
conf.findByUid = \
  select * \
  from "hn_conf" \
  where "uid" = ?;
conf.insertNew = \
  insert into "hn_conf" \
    ("exp_uid", "name", "desc") \
  values \
    (?,?,?);
conf.findLastUid = \
  select max("uid") \
  from "hn_conf";
conf.countForName = \
  select count(*) \
  from "hn_conf" \
  where \
    "exp_uid" = ? and \
    "name" = ?;
#=========================
par.findForConf = \
  select * \
  from "hn_par" \
  where "conf_uid" = ? \
  order by "name";
par.insertNew = \
  insert into "hn_par" \
    ("conf_uid", "name", "value", "internal", "desc") \
  values \
    (?,?,?,?,?);
#=========================
run.insertNew = \
  insert into "hn_run" \
    ("conf_uid", "millis", "chain", "psetCount") \
  values \
    (?,?,?,?);
run.findLastUid = \
  select max("uid") \
  from "hn_run";
run.findById = \
  select \
    r."uid" as uid, r."millis" as millis, \
    r."psetCount" as psetCount, r."psetComplete" as psetComplete, \
    r."chain" as chain, r."conf_uid" as conf_uid, \
    c."name" as conf_name, c."desc" as conf_desc, \
    e."desc" as exp_desc, e."uid" as exp_uid \
  from "hn_run" r \
    inner join "hn_conf" c on c."uid" = r."conf_uid" \
    inner join "hn_exp" e on e."uid" = c."exp_uid" \
  where r."uid"=?;
run.findAll = \
  select \
    r."uid" as uid, r."millis" as millis, \
    r."psetCount" as psetCount, r."psetComplete" as psetComplete, \
    r."chain" as chain, r."conf_uid" as conf_uid, \
    c."name" as conf_name, c."desc" as conf_desc, \
    e."desc" as exp_desc, e."uid" as exp_uid \
  from "hn_run" r \
    inner join "hn_conf" c on c."uid" = r."conf_uid" \
    inner join "hn_exp" e on e."uid" = c."exp_uid" \
  order by r."millis";
run.updatePsetComplete = \
  update "hn_run" \
  set "psetComplete" = ? \
  where "uid" = ?
#=========================
ctx.insertPrimitive = \
  insert into "hn_ctx" \
    ("millis", "run_uid", "psetI", "path", "type", "val") \
  values \
    (?,?,?,?,?,?);
ctx.insertDumpable = \
  insert into "hn_ctx" \
    ("millis", "run_uid", "psetI", "path", "type", "content") \
  values \
    (?,?,?,?,?,?);
ctx.findByRunSetPath = \
  select "type", "val", "content" \
  from "hn_ctx" \
  where \
    "run_uid" = ? and \
    "psetI" = ? and \
    "path" = ? and \
    "uid" = (\
      select max("uid") \
      from "hn_ctx" \
      where \
        "run_uid" = ? and \
        "psetI" = ? and \
        "path" = ?\
    );
ctx.countByRunSetPath = \
  select count(*) \
  from "hn_ctx" \
  where \
    "run_uid" = ? and \
    "psetI" = ? and \
    "path" = ? and \
    "uid" = (\
      select max("uid") \
      from "hn_ctx" \
      where \
        "run_uid" = ? and \
        "psetI" = ? and \
        "path" = ?\
    );
ctx.listPaths = \
  select distinct "path" \
  from "hn_ctx" \
  where "run_uid" = ?;
